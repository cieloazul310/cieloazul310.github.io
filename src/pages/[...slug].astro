---
/* eslint-disable-next-line import/no-unresolved */
import { getCollection, getEntry } from "astro:content";
import type { InferGetStaticPropsType } from "astro";
import {
  SarkaraLayout,
  Paper,
  Alert,
  Badge,
  Navigation,
  useNavigation,
} from "@cieloazul310/astro-sarkara";
import { css } from "styled-system/css";
import { flex } from "styled-system/patterns";
import shortcodes from "@/components/shortcodes";
import Analytics from "@/components/Analytics.astro";
import Category from "@/components/Category.astro";
import { siteMetadata, menu } from "@/data";
import { dateString, getCategoryColor } from "@/utils";

import "@/index.css";

export async function getStaticPaths() {
  const allPost = await getCollection("post", ({ data }) =>
    import.meta.env.PROD ? data.draft !== true : true,
  );

  return allPost
    .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
    .map((post, index, arr) => {
      const left = index !== 0 ? arr[index - 1] : null;
      const right = index !== arr.length - 1 ? arr[index + 1] : null;

      return {
        params: {
          slug: post.slug,
        },
        props: {
          post,
          left,
          right,
        },
      };
    });
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { post, left, right } = Astro.props;
const navigation = useNavigation(
  { left, right },
  {
    href: (obj) => `/${obj.slug}`,
    primaryText: (obj) => obj.data.title,
    secondaryText: (obj) => dateString(obj.data.date),
  },
);
const entry = await getEntry("post", post.slug);
const category = await getEntry("category", post.data.category.id);
const categoryType = await getEntry("categoryType", category.data.type.id);
const { Content } = await entry.render();
---

<SarkaraLayout
  title={post.data.title}
  image={entry.data.featuredImg?.src}
  siteMetadata={siteMetadata}
  menu={menu}
>
  <Analytics slot="top-of-head" />
  <p
    class={css({ textStyle: "headings", fontSize: "lg" })}
    slot="jumbotron-header"
  >
    {dateString(entry.data.date)}
  </p>
  <Paper>
    {
      import.meta.env.DEV && entry.data.draft && (
        <Alert status="warning" title="Draft">
          This post is draft and visible in dev mode only.
        </Alert>
      )
    }
    <Content components={{ ...shortcodes }} />
  </Paper>
  <Paper>
    <footer>
      <hgroup>
        <p
          class={flex({
            gap: { base: 0, md: 2 },
            direction: { base: "column", md: "row" },
          })}
        >
          <storng>{dateString(entry.data.date)}</storng>
          {
            entry.data.lastmod &&
              entry.data.date.getTime() !== entry.data.lastmod.getTime() && (
                <em class={css({ fontStyle: "italic" })}>
                  最終更新日{dateString(entry.data.lastmod)}
                </em>
              )
          }
        </p>
        <h2
          class={css({ textStyle: "headings", fontSize: ["lg", "xl", "2xl"] })}
        >
          {post.data.title}
        </h2>
      </hgroup>
      <p>
        <Badge colorPalette={getCategoryColor(categoryType.id)} slot="badge">
          {categoryType.data.name}
        </Badge>
      </p>
    </footer>
  </Paper>
  <Category category={category} />
  <Navigation {...navigation} />
  <Navigation {...navigation} direction="column" slot="sidebar-top" />
</SarkaraLayout>
